import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    static Pattern CLASS_METHOD = Pattern.compile("[a-zA-Z\\d$#_]*\\.[a-zA-Z\\d$#_]*(?=\\()");
    static Pattern METHOD = Pattern.compile("[a-zA-Z\\d$#_]*(?=\\()");
    static int PLANT_UML = 1;
    static int MARK_DOWN = 2;


    public static void main(String[] args) throws FileNotFoundException, IOException {


        if (args == null || args.length == 0) {
            help();
            return;
        }
        File traceFile = new File(args[0]);


        if (!traceFile.exists()) {
            System.out.println(traceFile.getAbsolutePath() + " not exists!");
            return;
        }
        int type = PLANT_UML;
        File outFile;

        if (type == PLANT_UML) {
            outFile = new File(traceFile.getParent(), traceFile.getName() + ".puml");
        } else {

            outFile = new File(traceFile.getParent(), traceFile.getName() + ".md");
        }
        BufferedReader bufferedReader = new BufferedReader(new FileReader(traceFile));
        MyPrintWriter writer = new MyPrintWriter(new FileWriter(outFile));
        if (type == PLANT_UML) {
            writer.write("@startuml\n");
            writer.write("autonumber\n");
            writer.write("skinparam defaultFontName Courier\n");
            writer.write("skinparam monochrome true\n");


        } else {
            writer.write("```sequence\n");
        }
        List<String> list = new ArrayList<>();
        String eachLine = bufferedReader.readLine();

        while (eachLine != null) {
            list.add(eachLine);
            eachLine = bufferedReader.readLine();
        }
        bufferedReader.close();
        String lastClass = "Begin";
        for (int i = list.size() - 1; i >= 0; i--) {
            String line = list.get(i);
            Matcher mattcher = CLASS_METHOD.matcher(line);
            if (mattcher.find()) {
                String class_method = mattcher.group();
                String[] class_methods = class_method.split("\\.");
                String clazz;
                String replace;
                if (type == PLANT_UML) {
                    replace = ".";
                } else {
                    replace = "\\n";
                }
                clazz = class_methods[0].replace("$", replace);
                String method;
                method = class_methods[1].replace("$", replace);
                String uml = lastClass + "->" + clazz + ":" + method + "()";
//                println("$uml")
                writer.write(uml + "\n");
                lastClass = clazz;
            }
        }
        if (type == PLANT_UML) {
            writer.write("@enduml");
        } else {
            writer.write("```");
        }
        writer.flush();
        writer.close();
        System.out.println(outFile);
    }

    static class MyPrintWriter {

        BufferedWriter mBufferedWriter;

        public MyPrintWriter(FileWriter fileWriter) {
            mBufferedWriter = new BufferedWriter(fileWriter);

        }

        public void write(String s) throws IOException {
            mBufferedWriter.write(s);
            System.out.print(s);
        }

        public void flush() throws IOException {
            mBufferedWriter.flush();

        }

        public void close() throws IOException {
            mBufferedWriter.close();
            System.out.println();
        }
    }

    private static void help() {
        System.out.println("");
        System.out.println(">>>>>>>>Trace to Seq<<<<<<<<<<");
        System.out.println("java -cp ./release/TraceToSeq.jar App ./release/trace.txt");
        System.out.println("======================================");
    }
}
